{"version":3,"sources":["logo.svg","NameForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_TEMPLATE","DEFAULT_MATCHES","match","DEFAULT_REPLACEMENT_LIST","forEach","item","NameForm","props","state","text","variable","variable_replacement","replacementList","originalText","handleTextArea","bind","replaceText","e","value","target","matches","new_replacementList","this","setState","name","Object","keys","regex","RegExp","replace","textBoxList","replace_function","textBox","key","className","class","type","onChange","push","onSubmit","handleFormSubmit","placeholder","map","replace_input","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,wJCEvCC,EAAmB,8YAUnBC,EAAkBD,EAAiBE,MAAM,gBACzCC,EAA2B,GAE/BF,EAAgBG,SAAQ,SAASC,GAC/BF,EAAyBE,GAAQA,K,IA2FpBC,E,YAtFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,KAAMT,EACNU,SAAU,SACVC,qBAAsB,GACtBC,gBAAiBT,EACjBU,aAAcb,GAEhB,EAAKc,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAXF,E,4EAaJE,GACb,IAAIC,EAAQD,EAAEE,OAAOD,MACjBE,EAAUF,EAAMhB,MAAM,gBACtBmB,EAAsB,GACV,OAAZD,GACFA,EAAQhB,SAAQ,SAASC,GACvBgB,EAAoBhB,GAAQA,KAKhCiB,KAAKC,SAAS,CAAEd,KAAMS,EAAOL,aAAcK,EAAON,gBAAiBS,M,kCAGzDJ,GACV,IAAIC,EAAQD,EAAEE,OAAOD,MACjBM,EAAOP,EAAEE,OAAOK,KAChBH,EAAsBC,KAAKd,MAAMI,gBACrCS,EAAoBG,GAAQN,EAC5B,IAAIL,EAAeS,KAAKd,MAAMK,aAC9BY,OAAOC,KAAKL,GAAqBjB,SAAQ,SAASC,GAChD,IAAIsB,EAAQ,IAAIC,OAAOvB,EAAK,KAC5BQ,EAAeA,EAAagB,QAAQF,EAAON,EAAoBhB,OAEjEiB,KAAKC,SAAS,CAAEd,KAAMI,EAAcF,qBAAqBO,EAAON,gBAAgBS,M,+BAIhF,IAAIS,EAAc,GACdC,EAAmBT,KAAKN,YACxBJ,EAAkBU,KAAKd,MAAMI,gBAkBjC,OAjBAa,OAAOC,KAAKd,GAAiBR,SAAQ,SAASC,GAC5C,IAAI2B,EACF,yBAAKC,IAAK5B,EAAM6B,UAAU,0BAC1B,yBAAKC,MAAM,2BAAX,WAA8C9B,EAA9C,UACA,2BACE+B,KAAK,OACLZ,KAAMnB,EACNa,MAAON,EAAgBP,GACvBgC,SAAUN,IAEZ,8BAGFD,EAAYQ,KAAKN,MAKjB,0BAAME,UAAU,kBAAkBK,SAAUjB,KAAKkB,kBAC/C,yBAAKN,UAAU,YACb,8BACEA,UAAU,wBACVhB,MAAOI,KAAKd,MAAMC,KAClB4B,SAAUf,KAAKR,eACf2B,YAAa,MAGjB,yBAAKP,UAAU,qBACb,4BACCJ,EAAYY,KAAI,SAASC,GACxB,OACEA,Y,GA5ESC,aCHRC,MAZf,WACE,OACE,yBAAKX,UAAU,OAEb,yBAAKA,UAAU,SAAf,YAGA,kBAAC,EAAD,QCAcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/C,MACvB,2DCZNgD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9935de92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\n\nvar DEFAULT_TEMPLATE = \"Dear {Hiring Manager}, \\\nIn my five-year career as a {Current Job}, I have \\\nhoned my legal research and writing skills, and \\\nthe attorneys I’ve worked with have complimented \\\nme on my command of case law and litigation \\\nsupport. {Company Name}’s 20 years in practice \\\nproves that the firm has strong values and \\\nexcellent attorneys, which is why I want to be \\\na part of the {Company Name} team.\"\n\nvar DEFAULT_MATCHES = DEFAULT_TEMPLATE.match(/\\{([^}]+)\\}/g);\nvar DEFAULT_REPLACEMENT_LIST = {}\n\nDEFAULT_MATCHES.forEach(function(item){\n  DEFAULT_REPLACEMENT_LIST[item] = item;\n});\n\n\nclass NameForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: DEFAULT_TEMPLATE,\n      variable: \"{Name}\",\n      variable_replacement: \"\",\n      replacementList: DEFAULT_REPLACEMENT_LIST,\n      originalText: DEFAULT_TEMPLATE//\"Hello {Name} have {School} you {Town} seen {Name} {Town}\"\n    };\n    this.handleTextArea = this.handleTextArea.bind(this);\n    this.replaceText = this.replaceText.bind(this);\n  }\n  handleTextArea(e) {\n    let value = e.target.value;\n    var matches = value.match(/\\{([^}]+)\\}/g);\n    let new_replacementList = {};\n    if (matches !== null) {\n      matches.forEach(function(item){\n        new_replacementList[item] = item;\n      });\n    };\n\n\n    this.setState({ text: value, originalText: value, replacementList: new_replacementList  });\n  }\n\n  replaceText(e) {\n    let value = e.target.value;\n    let name = e.target.name;\n    let new_replacementList = this.state.replacementList;\n    new_replacementList[name] = value;\n    let originalText = this.state.originalText;\n    Object.keys(new_replacementList).forEach(function(item){\n      let regex = new RegExp(item,'g');\n      originalText = originalText.replace(regex, new_replacementList[item]);\n    });\n    this.setState({ text: originalText, variable_replacement:value, replacementList:new_replacementList});\n  }\n\n  render() {\n    let textBoxList = [];\n    let replace_function = this.replaceText;\n    var replacementList = this.state.replacementList;\n    Object.keys(replacementList).forEach(function(item){\n      let textBox = (\n        <div key={item} className=\"replacement-input-text\">\n        <div class=\"replacement-input-label\">replace {item} with:</div>\n        <input\n          type=\"text\"\n          name={item}\n          value={replacementList[item]}\n          onChange={replace_function}\n        />\n        <br/>\n        </div>\n      );\n      textBoxList.push(textBox);\n    });\n\n\n    return (\n      <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n        <div className=\"text-box\">\n          <textarea\n            className=\"form-control text-box\"\n            value={this.state.text}\n            onChange={this.handleTextArea}\n            placeholder={\"\"}\n          />\n        </div>\n        <div className=\"replacement-input\">\n          <ul>\n          {textBoxList.map(function(replace_input) {\n            return (\n              replace_input\n\n            );\n          })}\n        </ul>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default NameForm;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport NameForm from \"./NameForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n\n      <div className=\"title\" >Model'Lo</div>\n\n\n      <NameForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}